name: Deploy to Hostinger

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DEPLOY_PATH: /var/www/koopjesjacht
  DOCKER_COMPOSE_VERSION: latest

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://koopjesjacht.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} ${{ secrets.HOSTINGER_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "echo 'SSH connection successful'"

      - name: Create deployment directory
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "mkdir -p ${{ env.DEPLOY_PATH }}"

      - name: Copy files to server
        run: |
          rsync -avz -e "ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }}" \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='*.log' \
            ./meal-scavenger-hunt/ \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: Create environment file
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "cd ${{ env.DEPLOY_PATH }} && cat > .env << 'EOF'
          # Database Configuration
          DB_USER=${{ secrets.DB_USER || 'scavenger' }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME || 'scavenger_hunt' }}

          # Application Environment
          NODE_ENV=production
          REACT_APP_API_URL=https://api.koopjesjacht.com

          # Security
          JWT_SECRET=${{ secrets.JWT_SECRET }}

          # SMTP Configuration
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT || 587 }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}

          # Payment Providers
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_CLIENT_ID }}
          PAYPAL_CLIENT_SECRET=${{ secrets.PAYPAL_CLIENT_SECRET }}
          MOLLIE_API_KEY=${{ secrets.MOLLIE_API_KEY }}

          # SmythOS Configuration
          SMYTHOS_API_KEY=${{ secrets.SMYTHOS_API_KEY }}

          # Firebase
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}

          # Redis Configuration
          REDIS_URL=redis://redis:3493
          EOF"

      - name: Pull Docker images
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "cd ${{ env.DEPLOY_PATH }} && \
             docker-compose pull"

      - name: Stop existing containers
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "cd ${{ env.DEPLOY_PATH }} && \
             docker-compose down || true"

      - name: Start services
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "cd ${{ env.DEPLOY_PATH }} && \
             docker-compose up -d"

      - name: Wait for services to be ready
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "cd ${{ env.DEPLOY_PATH }} && \
             timeout 180 sh -c 'until docker-compose exec -T postgres pg_isready; do sleep 2; done' && \
             timeout 60 sh -c 'until docker-compose exec -T redis redis-cli ping; do sleep 2; done'"

      - name: Run database migrations
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "cd ${{ env.DEPLOY_PATH }} && \
             docker-compose exec -T backend npm run migrate || echo 'Migration script not found'"

      - name: Health check
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "cd ${{ env.DEPLOY_PATH }} && docker-compose ps"

      - name: Test backend API
        run: |
          sleep 10
          curl -f https://api.koopjesjacht.com/health || \
          curl -f http://${{ secrets.HOSTINGER_HOST }}:3527/health || \
          echo "Health check endpoint not available yet"

      - name: Cleanup old Docker images
        if: success()
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT || 22 }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "docker system prune -af --volumes || true"

      - name: Send deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            STATUS="✅ SUCCESS"
            COLOR="good"
          else
            STATUS="❌ FAILED"
            COLOR="danger"
          fi
          echo "Deployment $STATUS: ${{ github.ref_name }} to Hostinger"

  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()

    steps:
      - name: Rollback deployment
        run: |
          echo "Deployment failed. Manual rollback may be required."
          echo "Connect to server and run: docker-compose down && docker-compose up -d"